package com.example.ringo.uaes;

public class LUTprediction_top {

    private int sintaPECaliTable[][] = {

        {0,40,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0},

        {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,50,0,255,0,255,0},

        {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,50,0,255,0},

        {0,255,0,255,65,255,65,255,65,255,65,255,65,255,0,55,0,255,0,255,0},

        {0,255,0,255,65,255,65,255,65,255,65,255,65,255,0,255,0,55,0,255,0},

            {     0	,    59	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {     0	,   255	,     0	,    45	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255,1},
            {     0	,   255	,     0	,   255	,     0	,    49	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,    49	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    44	,     0	,   255	,     0	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    47	,     0	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    47	,1},
            {    45	,    77	,     0	,    50	,     0	,   255	,    42	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {     0	,   255	,    78	,   255	,     0	,    86	,     0	,    53	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {     0	,    73	,     0	,   255	,     0	,   255	,    63	,   255	,     0	,    50	,     0	,    56	,     0	,   255	,1},
            {    66	,   255	,     0	,   255	,    67	,   255	,     0	,   255	,    44	,    49	,     0	,   255	,     0	,   255	,1},
            {     0	,    81	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    79	,     0	,    50	,    41	,   255	,1},
            {     0	,   255	,    47	,    52	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    60	,1},
            {    54	,   255	,     0	,   255	,     0	,   255	,    46	,    52	,    50	,   255	,    56	,   255	,     0	,   255	,1},
            {    41	,    75	,     0	,    55	,    69	,   255	,    77	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {     0	,   255	,    48	,    53	,     0	,    54	,     0	,   255	,     0	,   255	,     0	,   255	,    53	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,    68	,   255	,     0	,    50	,    55	,    79	,     0	,   255	,1},
            {    50	,   255	,     0	,    54	,    64	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,    47	,    57	,1},
            {     0	,    61	,     0	,   255	,     0	,   255	,     0	,   255	,    64	,    82	,     0	,    80	,     0	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,    78	,   255	,     0	,    70	,     0	,    52	,1},
            {    51	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,    46	,    51	,     0	,    85	,1},
            {     0	,    61	,     0	,   255	,     0	,    55	,     0	,   255	,     0	,   255	,     0	,   255	,    51	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    53	,     0	,    73	,     0	,    59	,1},
            {    60	,    65	,    46	,   255	,     0	,    51	,     0	,   255	,     0	,   255	,     0	,   255	,    42	,   255	,1},
            {    69	,   255	,     0	,   255	,    40	,    54	,     0	,    74	,    49	,    54	,     0	,   255	,     0	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    51	,     0	,   255	,    55	,    60	,1},
            {    53	,    72	,     0	,   255	,     0	,   255	,    74	,   255	,     0	,    52	,     0	,    87	,     0	,   255	,1},
            {     0	,   255	,    68	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    51	,1},
            {    50	,    73	,    47	,    52	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,    71	,   255	,1},
            {     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    74	,    43	,    48	,1},
            {     0	,   255	,     0	,    55	,     0	,    52	,     0	,    57	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {    67	,    72	,     0	,    53	,    47	,   255	,    67	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {    52	,   255	,     0	,    49	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,    85	,    46	,   255	,1},
            {     0	,    70	,     0	,    59	,     0	,   255	,     0	,   255	,     0	,   255	,    51	,    70	,     0	,    83	,1},
            {    75	,   255	,    75	,    80	,     0	,    56	,     0	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,1},
            {    48	,    68	,     0	,   255	,     0	,   255	,    78	,   255	,    73	,   255	,     0	,   255	,     0	,   255	,1},
            {    62	,    85	,    81	,   255	,     0	,   255	,     0	,   255	,     0	,   255	,    58	,   255	,    81	,   255	,1},
            {    79	,   255	,    63	,    85	,    40	,    80	,    65	,   255	,    47	,    87	,    57	,    76	,    54	,   255,3},
            {    78	,    83	,    57	,    80	,    63	,    70	,    47	,    75	,    74	,   255	,    44	,    84	,    56	,   255,3},
            {    73	,    80	,    53	,    75	,    50	,    76	,    59	,   255	,    44	,    69	,    71	,   255	,    53	,    85,3},
            {    64	,   255	,    59	,    82	,    71	,   255	,    62	,    86	,    62	,    67	,    57	,   255	,    57	,    82,3},
            {    58	,   255	,    62	,   255	,    44	,    84	,    73	,   255	,    62	,   255	,    61	,   255	,    47	,    87,3},
            {    68	,   255	,    58	,    68	,    40	,    63	,    60	,   255	,    63	,   255	,    56	,    87	,    75	,    86,3},
            {    56	,    88	,    66	,   255	,    56	,    72	,    59	,    84	,    63	,    68	,    58	,    77	,    64	,   255,3},
            {    67	,    84	,    74	,   255	,    55	,   255	,    73	,    78	,    58	,    69	,    58	,    83	,    60	,   255,3},
            {    53	,   255	,    58	,    84	,    73	,   255	,    66	,   255	,    56	,    83	,    62	,   255	,    68	,    73,3},
            {    58	,   255	,    61	,    80	,    55	,    76	,    48	,    73	,    62	,    80	,    56	,    83	,    40	,    66,3},
            {    80	,   255	,    56	,    65	,    40	,    75	,    54	,   255	,    69	,   255	,    40	,    80	,    53	,   255,3},
            {    66	,   255	,    63	,    80	,    61	,    70	,    59	,   255	,    61	,   255	,    57	,    85	,    67	,    80,3},
            {    73	,   255	,    66	,   255	,    40	,    80	,    62	,   255	,    57	,   255	,    40	,    69	,    58	,    69,3},
            {    63	,   255	,    80	,   255	,    65	,   255	,    56	,   255	,    49	,    89	,    58	,    80	,    69	,    75,3},
            {    65	,   255	,    64	,    89	,    60	,   255	,    40	,    80	,    58	,    87	,    46	,    86	,    62	,    67,3},
            {    75	,   255	,    75	,   255	,    42	,    82	,    69	,   255	,    55	,    64	,    67	,    88	,    53	,   255,3},
            {    64	,   255	,    63	,    76	,    71	,   255	,    73	,    88	,    67	,    82	,    60	,    83	,    54	,   255	,3}
    };


    private int sintaPSCaliTable[][] = {

        {0,255,5,255,0,255,0,255,0,255,0,255,0,255,0,255,3,255,0,255,0,255,6,255,0,255,0,255,0,255,0},

        {0,255,0,255,0,255,0,255,0,255,0,255,0,255,-3,10,0,255,0,255,0,255,0,255,-7,10,0,255,0,255,0},

    };
    private int Incarindex [][]=  {

        { 2, 0 }, { 3, 0 }, { 4, 0 }, { 5, 0 }, { 6, 0 },

        { 2, 7 }, { 3, 7 }, { 4, 7 }, { 5, 7 }, { 6, 7 },

        { 2, 8 }, { 3, 8 }, { 4, 8 }, { 5, 8 }, { 6, 8 },

    };



    private int PS_POINT_NUM=2,PE_NODE_NUM=10,PE_POINT_NUM=72,PS_NODE_NUM=15,OFFSET=5;

    public int PS_s32CaliFunction(int[] intaRssi)
    {

        int min;
        int max;
        int index = -1;
        int zone = 2;
        int value = 0;
        for (int point_index = 0; point_index < PS_POINT_NUM; point_index++)
        {
            for (int node_index = 0; node_index < PS_NODE_NUM; node_index++)
            {
                min = sintaPSCaliTable[point_index][ 2 * node_index];
                max = sintaPSCaliTable[point_index][2 * node_index + 1];
                zone = sintaPSCaliTable[point_index][20];
                value = intaRssi[Incarindex[node_index][0]] - intaRssi[Incarindex[node_index][1]];
                if ((zone != -1) && (value >= min) && (value <= max))
                {
                    if (node_index == 14)//条件无效，是否满足之前的条件
                    {
                        index = point_index;
                    }
                    continue;
                }
                else
                {
                    break;
                }

            }
            if (index != -1)
            {
                break;
            }
        }
        return index;
    }

    /*
     * name     : PE_s32CaliFunction
     * function : Locate the Key outside the car
     * parameter: array of Rssi for master and anchors
     * return   :
     *			-1: Not Found
     *			0 : In the PS Zone
     *			1 : In the UnLock Zone
     *			2 ：In the Buffer Zone
     *           3 : In the Lock Zone
     */

    private int PE_s32CaliFunction(int[] intaRssi)
    {
        int min;
        int max;
        int index = -1;
        int zone = -1;
        for (int point_index = 0; point_index < PE_POINT_NUM; point_index++)
        {
            for (int node_index = 0; node_index < PE_NODE_NUM; node_index++)
            {
                min = sintaPECaliTable[point_index][2 * node_index];
                max = sintaPECaliTable[point_index][2 * node_index + 1];
                zone = sintaPECaliTable[point_index][ 20];
                if ((zone!=-1) && (intaRssi[node_index] >= min) && (intaRssi[node_index] <= max))
                {
                    if (node_index == 9)//条件无效，是否满足之前的条件
                    {
                        index = point_index;
                    }
                    continue;
                }
                else
                {
                    break;
                }

            }
            if (index != -1)
            {
                break;
            }
        }
        return index;
    }

    /*
     * name     : PEPS_s32CaliFunction
     * function : Locate the Key
     * parameter: array of Rssi for master and anchors
     * return   :
     *			-1: Not Found
     *			0 : In the PS Zone
     *			1 : In the UnLock Zone
     *			2 ：In the Buffer Zone
     *           3 : In the Lock Zone
     */

    public int PEPS_s32CaliFunction(Node[] nodes)
    {
        int[]rssi=new int[PE_NODE_NUM];
        for (int i=0;i<PE_NODE_NUM;i++){
            rssi[i]=(int)nodes[i].RSSI_filtered;
        }
        int index = PS_s32CaliFunction(rssi);
        int zone = -1;
        if (index != -1)
        {
            zone = sintaPSCaliTable[index][30];
        }
        else
        {
            index = PE_s32CaliFunction(rssi);
            if (index != -1)
            {
                zone = sintaPECaliTable[index][20];
            }
            else
            {

            }
        }
        return zone;
    }

}
