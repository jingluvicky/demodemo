package com.example.ringo.uaes;

public class LUTprediction_top {

    private int sintaPECaliTable[][] = {

        {0,40,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0},

        {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,50,0,255,0,255,0},

        {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,50,0,255,0},

        {0,255,0,255,65,255,65,255,65,255,65,255,65,255,0,55,0,255,0,255,0},

        {0,255,0,255,65,255,65,255,65,255,65,255,65,255,0,255,0,55,0,255,0},

        {0,58,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,45,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,255,0,51,0,255,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,255,0,255,0,50,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,255,0,255,0,255,0,45,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,255,0,255,0,255,0,255,0,51,0,255,0,255,0,255,0,255,1},

        {0,255,0,255,0,255,0,255,0,255,0,255,0,50,0,255,0,255,0,255,1},

        {0,61,0,255,0,255,0,56,0,86,61,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,88,0,255,0,52,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,255,63,255,0,255,0,49,0,255,0,255,0,255,0,255,0,255,1},

        {65,255,0,51,0,81,0,255,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,255,0,255,0,55,0,50,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,42,255,48,53,48,65,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {58,255,0,255,0,255,81,255,40,72,0,55,0,255,0,255,0,255,0,255,1},

        {0,255,0,53,48,65,55,80,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,83,0,47,70,255,69,255,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {64,255,0,255,0,255,0,255,0,53,40,71,46,73,0,255,0,255,0,255,1},

        {0,255,0,255,0,255,0,63,0,52,79,255,0,255,0,255,0,255,0,255,1},

        {0,83,47,52,0,255,0,255,0,255,0,71,0,61,0,255,0,255,0,255,1},

        {64,69,80,255,0,255,0,255,0,255,72,255,81,86,0,255,0,255,0,255,1},

        {58,65,0,255,64,255,67,255,0,55,0,255,0,255,0,255,0,255,0,255,1},

        {0,82,0,56,0,58,0,255,0,255,0,255,68,255,0,255,0,255,0,255,1},

        {0,73,75,255,61,83,0,54,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,48,255,0,82,0,255,0,255,0,255,0,52,0,255,0,255,0,255,1},

        {0,255,0,255,0,255,0,255,56,61,0,54,0,255,0,255,0,255,0,255,1},

        {61,66,0,62,48,86,42,63,0,255,0,255,0,255,0,255,0,255,0,255,1},

        {0,255,0,52,0,66,0,255,0,255,0,255,0,82,0,255,0,255,0,255,1},

        {75,85,62,72,50,255,57,84,58,83,64,74,62,255,0,255,0,255,0,255,3},

        {70,80,72,82,64,89,61,255,56,255,76,255,69,255,0,255,0,255,0,255,3},

        {60,255,56,255,72,255,60,76,71,255,64,88,77,255,0,255,0,255,0,255,3},

        {77,255,57,255,57,255,50,89,57,73,50,255,50,86,0,255,0,255,0,255,3},

        {64,74,66,76,62,255,76,255,65,82,62,255,62,74,0,255,0,255,0,255,3},

        {59,255,61,255,57,89,68,255,57,255,76,86,57,255,0,255,0,255,0,255,3},

        {71,255,65,83,70,87,50,87,50,255,68,78,58,69,0,255,0,255,0,255,3},

        {55,84,61,71,69,85,50,87,60,255,67,255,69,79,0,255,0,255,0,255,3},

        {70,86,58,255,68,255,50,80,57,81,74,255,61,80,0,255,0,255,0,255,3},

        {73,255,62,89,50,255,67,87,65,82,63,255,67,86,0,255,0,255,0,255,3},

        {64,83,50,85,90,255,77,255,57,72,53,85,50,255,0,255,0,255,0,255,3},

        {50,255,64,255,63,76,62,85,50,66,80,255,50,255,0,255,0,255,0,255,3},

        {70,255,67,81,60,255,50,255,68,78,62,77,59,255,0,255,0,255,0,255,3},

        {78,88,50,255,54,255,71,81,52,255,62,72,62,75,0,255,0,255,0,255,3},

        {65,255,65,75,50,78,64,82,50,65,50,255,77,255,0,255,0,255,0,255,3},

        {68,89,69,79,60,255,50,64,67,83,62,82,60,75,0,255,0,255,0,255,3},

        {58,255,86,255,76,255,50,78,53,255,62,81,57,255,0,255,0,255,0,255,3},

        {61,82,57,68,65,255,74,89,58,76,50,88,76,255,0,255,0,255,0,255,3},

        {70,255,50,78,75,255,81,255,50,80,50,80,73,255,0,255,0,255,0,255,3},

        {71,81,62,255,67,255,54,72,50,64,79,255,70,255,0,255,0,255,0,255,3},

        {73,255,61,255,66,255,50,84,60,255,64,255,50,72,0,255,0,255,0,255,3},

        {78,88,52,81,70,87,67,77,53,255,54,79,50,85,0,255,0,255,0,255,3},

        {50,66,71,81,67,255,50,79,62,255,60,255,53,80,0,255,0,255,0,255,3},

        {71,255,67,77,82,255,72,82,69,255,59,69,54,72,0,255,0,255,0,255,3},

        {50,80,69,79,55,255,81,255,72,82,50,255,66,255,0,255,0,255,0,255,3},

        {65,75,72,82,56,66,66,255,50,255,67,255,75,85,0,255,0,255,0,255,3},

        {78,255,50,60,69,255,81,255,61,255,63,255,50,255,0,255,0,255,0,255,3},

        {57,76,64,83,85,255,50,255,67,255,62,76,67,77,0,255,0,255,0,255,3},

        {73,255,50,87,60,74,50,83,57,81,59,77,52,72,0,255,0,255,0,255,3},

        {50,255,75,85,80,255,68,87,56,66,70,255,55,71,0,255,0,255,0,255,3},

        {69,255,68,255,62,72,69,89,50,62,71,255,55,84,0,255,0,255,0,255,3},

        {76,86,52,62,82,255,50,255,71,255,66,76,63,255,0,255,0,255,0,255,3},

        {74,84,63,255,76,86,82,255,68,80,50,72,70,255,0,255,0,255,0,255,3},

        {68,255,71,255,54,86,63,255,50,88,81,255,73,83,0,255,0,255,0,255,3},

        {73,83,73,255,59,81,61,75,50,80,54,85,80,255,0,255,0,255,0,255,3},

        {50,89,50,69,59,85,75,87,50,74,61,255,73,255,0,255,0,255,0,255,3},

        {76,255,70,80,54,86,72,255,61,255,60,255,50,72,0,255,0,255,0,255,3},

        {70,255,66,76,76,255,75,255,63,255,64,255,68,86,0,255,0,255,0,255,3},

        {57,78,73,255,62,79,57,86,65,255,50,73,70,255,0,255,0,255,0,255,3},

        {61,71,82,255,53,80,78,255,62,86,65,255,58,77,0,255,0,255,0,255,3},

    };


    private int sintaPSCaliTable[][] = {

        {0,255,5,255,0,255,0,255,0,255,0,255,0,255,0,255,3,255,0,255,0,255,6,255,0,255,0,255,0,255,0},

        {0,255,0,255,0,255,0,255,0,255,0,255,0,255,-3,10,0,255,0,255,0,255,0,255,-7,10,0,255,0,255,0},

    };
    private int Incarindex [][]=  {

        { 2, 0 }, { 3, 0 }, { 4, 0 }, { 5, 0 }, { 6, 0 },

        { 2, 7 }, { 3, 7 }, { 4, 7 }, { 5, 7 }, { 6, 7 },

        { 2, 8 }, { 3, 8 }, { 4, 8 }, { 5, 8 }, { 6, 8 },

    };



    private int PS_POINT_NUM=2,PE_NODE_NUM=10,PE_POINT_NUM=72,PS_NODE_NUM=15,OFFSET=5;

    public int PS_s32CaliFunction(int[] intaRssi)
    {

        int min;
        int max;
        int index = -1;
        int zone = 2;
        int value = 0;
        for (int point_index = 0; point_index < PS_POINT_NUM; point_index++)
        {
            for (int node_index = 0; node_index < PS_NODE_NUM; node_index++)
            {
                min = sintaPSCaliTable[point_index][ 2 * node_index];
                max = sintaPSCaliTable[point_index][2 * node_index + 1];
                zone = sintaPSCaliTable[point_index][20];
                value = intaRssi[Incarindex[node_index][0]] - intaRssi[Incarindex[node_index][1]];
                if ((zone != -1) && (value >= min) && (value <= max))
                {
                    if (node_index == 14)//条件无效，是否满足之前的条件
                    {
                        index = point_index;
                    }
                    continue;
                }
                else
                {
                    break;
                }

            }
            if (index != -1)
            {
                break;
            }
        }
        return index;
    }

    /*
     * name     : PE_s32CaliFunction
     * function : Locate the Key outside the car
     * parameter: array of Rssi for master and anchors
     * return   :
     *			-1: Not Found
     *			0 : In the PS Zone
     *			1 : In the UnLock Zone
     *			2 ：In the Buffer Zone
     *           3 : In the Lock Zone
     */

    private int PE_s32CaliFunction(int[] intaRssi)
    {
        int min;
        int max;
        int index = -1;
        int zone = -1;
        for (int point_index = 0; point_index < PE_POINT_NUM; point_index++)
        {
            for (int node_index = 0; node_index < PE_NODE_NUM; node_index++)
            {
                min = sintaPECaliTable[point_index][2 * node_index];
                max = sintaPECaliTable[point_index][2 * node_index + 1];
                zone = sintaPECaliTable[point_index][ 20];
                if ((zone!=-1) && (intaRssi[node_index] >= min) && (intaRssi[node_index] <= max))
                {
                    if (node_index == 9)//条件无效，是否满足之前的条件
                    {
                        index = point_index;
                    }
                    continue;
                }
                else
                {
                    break;
                }

            }
            if (index != -1)
            {
                break;
            }
        }
        return index;
    }

    /*
     * name     : PEPS_s32CaliFunction
     * function : Locate the Key
     * parameter: array of Rssi for master and anchors
     * return   :
     *			-1: Not Found
     *			0 : In the PS Zone
     *			1 : In the UnLock Zone
     *			2 ：In the Buffer Zone
     *           3 : In the Lock Zone
     */

    public int PEPS_s32CaliFunction(Node[] nodes)
    {
        int[]rssi=new int[PE_NODE_NUM];
        for (int i=0;i<PE_NODE_NUM;i++){
            rssi[i]=(int)nodes[i].RSSI_filtered;
        }
        int index = PS_s32CaliFunction(rssi);
        int zone = -1;
        if (index != -1)
        {
            zone = sintaPSCaliTable[index][30];
        }
        else
        {
            index = PE_s32CaliFunction(rssi);
            if (index != -1)
            {
                zone = sintaPECaliTable[index][20];
            }
            else
            {

            }
        }
        return zone;
    }

}
